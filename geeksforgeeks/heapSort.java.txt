import java.util.*;
 
public class GfG
{
   public void heapSort(int arr[], int n)
    {
        for(int i=0;i<n-1;i++)
            heapify(arr,0,i+1);
    
        int temp;
        for(int i=n-1;i>0;i--)
        {
            temp=arr[0];
            arr[0]=arr[i];
            arr[i]=temp;
            heapDown(arr,0,i-1);
        }


    }
    
    public void heapDown(int arr[],int r,int b)
    {
        int lc=2*r+1,rc=2*r+2,mc,t;
        if(lc<=b)
        {
            if(lc==b)
               mc=lc;
            else if(arr[lc]<arr[rc])
                    mc=rc;
                  else
                    mc=lc;
                    
            if(arr[mc]>arr[r])
            {
                t=arr[mc];
                arr[mc]=arr[r];
                arr[r]=t;
                heapDown(arr,mc,b);
            }
        }
    }
    
 
    // To heapify a subtree rooted with node i which is
    // an index in arr[]. n is size of heap
    public void heapify(int arr[], int r, int b)
    {
        int temp,p;
        if(r<b)
        {
            p=(b-1)/2;
            if(arr[p]<arr[b])
            {
                temp=arr[p];
                arr[p]=arr[b];
                arr[b]=temp;
                heapify(arr,r,p);
            }
        }
    }
    
    public void printResult(int arr[])
    {
        for(int i :arr)
            System.out.print(i+" ");
            
            System.out.println();
    }
    
    
     public static void main(String args[])
     {
         Scanner sc=new Scanner(System.in);
         GfG g=new GfG();
         int t=sc.nextInt();
         
         while(t-->0)
         {
             int n=sc.nextInt();
             int arr[]=new int[n];
             
             for(int i=0;i<n;i++)
             {
                 arr[i]=sc.nextInt();
             }
             
             g.heapSort(arr,n);
             g.printResult(arr);
             
         }
         
     }
}
 
